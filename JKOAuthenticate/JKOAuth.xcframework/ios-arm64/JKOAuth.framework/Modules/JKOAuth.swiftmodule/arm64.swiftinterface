// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.4.2 (swiftlang-1205.0.28.2 clang-1205.0.19.57)
// swift-module-flags: -target arm64-apple-ios11.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name JKOAuth
import Foundation
@_exported import JKOAuth
import Swift
import UIKit
@_hasMissingDesignatedInitializers public class JKOAuthService {
  public static let shared: JKOAuth.JKOAuthService
  public func application(_ application: UIKit.UIApplication, didFinishLaunchingWithOptions launchOptions: [UIKit.UIApplication.LaunchOptionsKey : Any]?, debugMode: Swift.Bool)
  public func application(_ app: UIKit.UIApplication, open url: Foundation.URL, options: [UIKit.UIApplication.OpenURLOptionsKey : Any]) -> Swift.Bool
  @available(iOS 13.0, *)
  public func application(_ app: UIKit.UIApplication, open url: Foundation.URL, options: UIKit.UIScene.OpenURLOptions) -> Swift.Bool
  public static func goToJKOSAppStore()
  @objc deinit
}
public enum JKOAuthError : Swift.Error {
  case userCancelled
  case failed(code: Swift.String, message: Swift.String)
}
public protocol JKOAuthDelegate : AnyObject {
  func authDidSuccess(authCode: Swift.String, grantedScopes: [Swift.String], jkosUserID: Swift.String?, userID: Swift.String?)
  func authDidFailed(error: JKOAuth.JKOAuthError)
  func jkosAppNotFound()
}
@_hasMissingDesignatedInitializers public class JKOAuthManager {
  weak public var delegate: JKOAuth.JKOAuthDelegate?
  public init()
  public func start(scopes: [Swift.String], userID: Swift.String? = nil)
  @objc deinit
}
